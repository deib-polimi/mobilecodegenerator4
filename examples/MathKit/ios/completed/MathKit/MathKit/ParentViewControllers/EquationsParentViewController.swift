//
//  EquationsParentViewController.swift
//  Equations
//
//  Automatically generated by MobileCodeGenerator 4.
//  Copyright 2018 . All rights reserved.
//

import UIKit

class EquationsParentViewController: UIViewController {
    
    // MARK: Properties
	fileprivate let linearVC: UIViewController
	fileprivate let quadraticVC: UIViewController
	fileprivate let systemVC: UIViewController
    fileprivate var layoutType: Int = Constants.SCENE_TYPE_SINGLE_VC
    lazy var menuTransitioningDelegate = MenuPresentationManager()
    
    fileprivate var tabBar: UITabBar? = nil
    
    // MARK: Initialization
    init() {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
		linearVC = storyboard.instantiateViewController(withIdentifier: "LinearViewControllerStoryboardID")
		quadraticVC = storyboard.instantiateViewController(withIdentifier: "QuadraticViewControllerStoryboardID")
		systemVC = storyboard.instantiateViewController(withIdentifier: "SystemViewControllerStoryboardID")
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
		linearVC = storyboard.instantiateViewController(withIdentifier: "LinearViewControllerStoryboardID")
		quadraticVC = storyboard.instantiateViewController(withIdentifier: "QuadraticViewControllerStoryboardID")
		systemVC = storyboard.instantiateViewController(withIdentifier: "SystemViewControllerStoryboardID")
        super.init(coder: aDecoder)
    }
    
    // MARK: UIViewController
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Setup menu button into navigation bar
	    let menuIcon = UIImage(named: "menu_icon")
	    navigationItem.leftBarButtonItem = UIBarButtonItem(image: menuIcon, style: .plain, target: self, action: #selector(showMenu))
	    
        
        if UIDevice.current.userInterfaceIdiom == .phone {
        	layoutType = Constants.SCENE_TYPE_SINGLE_VC_TAB
            setupPhoneUI()
        } else if UIDevice.current.userInterfaceIdiom == .pad {
        	layoutType = Constants.SCENE_TYPE_MULTI_VC
            setupTabletUI()
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func showMenu() {
    	let storyboard = UIStoryboard(name: "Main", bundle: nil)
		let menuViewController = storyboard.instantiateViewController(withIdentifier: "MenuViewControllerStoryboardID") as! MenuViewController
		menuViewController.delegate = self
		menuViewController.transitioningDelegate = menuTransitioningDelegate
		menuViewController.modalPresentationStyle = .custom
		present(menuViewController, animated: true, completion: nil)
	}
    
    
    // MARK: Phone UI Setup
    private func setupPhoneUI() {
		view.backgroundColor = UIColor(displayP3Red: 1, green: 1, blue: 1, alpha: 1)
		addChildViewController(linearVC)
		linearVC.didMove(toParentViewController: self)
		linearVC.view.translatesAutoresizingMaskIntoConstraints = false
		addChildViewController(quadraticVC)
		quadraticVC.didMove(toParentViewController: self)
		quadraticVC.view.translatesAutoresizingMaskIntoConstraints = false
		addChildViewController(systemVC)
		systemVC.didMove(toParentViewController: self)
		systemVC.view.translatesAutoresizingMaskIntoConstraints = false
		tabBar = UITabBar(frame: CGRect(x: 0, y: 0, width: 600, height: 48))
        tabBar!.barStyle = UIBarStyle.default
        tabBar!.translatesAutoresizingMaskIntoConstraints = false
        var tabItems = [UITabBarItem]()
        let firstItem = UITabBarItem(title: "Linear", image: nil, tag: 0)
        tabItems.append(firstItem)
		tabItems.append(UITabBarItem(title: "Quadratic", image: nil, tag: 1))
		tabItems.append(UITabBarItem(title: "System", image: nil, tag: 2))
        tabBar!.setItems(tabItems, animated: true)
        tabBar!.selectedItem = firstItem
        tabBar!.delegate = self
        view.addSubview(tabBar!)
        
        NSLayoutConstraint.activate([
            tabBar!.heightAnchor.constraint(equalToConstant: 48),
            tabBar!.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tabBar!.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            view.bottomAnchor.constraint(equalTo: tabBar!.bottomAnchor)
            ])
    	showLinearVC()
    }
    
    // MARK: Tablet UI Setup
    private func setupTabletUI() {
		view.backgroundColor = UIColor(displayP3Red: 1, green: 1, blue: 1, alpha: 1)
		addChildViewController(linearVC)
		linearVC.didMove(toParentViewController: self)
		let linearView = linearVC.view!
		linearView.translatesAutoresizingMaskIntoConstraints = false
		view.addSubview(linearView)
		
		addChildViewController(quadraticVC)
		quadraticVC.didMove(toParentViewController: self)
		let quadraticView = quadraticVC.view!
		quadraticView.translatesAutoresizingMaskIntoConstraints = false
		view.addSubview(quadraticView)
		
		addChildViewController(systemVC)
		systemVC.didMove(toParentViewController: self)
		let systemView = systemVC.view!
		systemView.translatesAutoresizingMaskIntoConstraints = false
		view.addSubview(systemView)
		
		// linearView Constraints
		NSLayoutConstraint.activate([
			
			linearView.topAnchor.constraint(
				equalTo: view.topAnchor, constant: 0),
			linearView.leadingAnchor.constraint(
				equalTo: view.leadingAnchor, constant: 0),
			
			linearView.widthAnchor.constraint(
				equalTo: view.widthAnchor, multiplier: 0.3),
			
			linearView.heightAnchor.constraint(
				equalTo: view.heightAnchor, multiplier: 1.0),
			
            ])
            
		// quadraticView Constraints
		NSLayoutConstraint.activate([
			
			quadraticView.topAnchor.constraint(
				equalTo: view.topAnchor, constant: 0),
			quadraticView.leadingAnchor.constraint(
				equalTo: linearView.trailingAnchor, constant: 0),
			
			quadraticView.widthAnchor.constraint(
				equalTo: view.widthAnchor, multiplier: 0.3),
			
			quadraticView.heightAnchor.constraint(
				equalTo: view.heightAnchor, multiplier: 1.0),
			
            ])
            
		// systemView Constraints
		NSLayoutConstraint.activate([
			
			systemView.topAnchor.constraint(
				equalTo: view.topAnchor, constant: 0),
			systemView.leadingAnchor.constraint(
				equalTo: quadraticView.trailingAnchor, constant: 0),
			
			systemView.widthAnchor.constraint(
				equalTo: view.widthAnchor, multiplier: 0.4),
			
			systemView.heightAnchor.constraint(
				equalTo: view.heightAnchor, multiplier: 1.0),
			
            ])
            
    }
    
    // MARK: functions that show each child view controller for singleVC/singleVCTab type scenes
	fileprivate func showLinearVC() {
		for v in view.subviews {
			if v as? UITabBar == nil {
				v.removeFromSuperview()
			}
		}
	
		let linearView = linearVC.view!
        view.addSubview(linearView)
            
		NSLayoutConstraint.activate([
	            linearView.bottomAnchor.constraint(equalTo: tabBar!.topAnchor),
	            linearView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
	            linearView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
	            linearView.topAnchor.constraint(equalTo: view.topAnchor)
            	])
	}
	fileprivate func showQuadraticVC() {
		for v in view.subviews {
			if v as? UITabBar == nil {
				v.removeFromSuperview()
			}
		}
	
		let quadraticView = quadraticVC.view!
        view.addSubview(quadraticView)
            
		NSLayoutConstraint.activate([
	            quadraticView.bottomAnchor.constraint(equalTo: tabBar!.topAnchor),
	            quadraticView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
	            quadraticView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
	            quadraticView.topAnchor.constraint(equalTo: view.topAnchor)
            	])
	}
	fileprivate func showSystemVC() {
		for v in view.subviews {
			if v as? UITabBar == nil {
				v.removeFromSuperview()
			}
		}
	
		let systemView = systemVC.view!
        view.addSubview(systemView)
            
		NSLayoutConstraint.activate([
	            systemView.bottomAnchor.constraint(equalTo: tabBar!.topAnchor),
	            systemView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
	            systemView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
	            systemView.topAnchor.constraint(equalTo: view.topAnchor)
            	])
    }
    
    // MARK: application logic
    fileprivate func linearEquation(m: Float, q: Float) -> String {
        return Utils.truncateResult(String(-(q / m)))
    }
    
    fileprivate func quadraticEquation(a: Float, b: Float, c: Float) -> [String] {
        var results = [String]()
        let delta = pow(b, 2) - (4 * a * c)
        if delta >= 0 {
            let result1 = (-b + sqrt(delta)) / (2 * a)
            let result2 = (-b - sqrt(delta)) / (2 * a)
            results.append(Utils.truncateResult(String(result1)))
            results.append(Utils.truncateResult(String(result2)))
        } else {
            results.append("∆ < 0")
            results.append("∆ < 0")
        }
        return results
    }
    
    fileprivate func twoEquationsSystem(a1: Float, b1: Float, c1: Float, a2: Float, b2: Float, c2: Float) -> [String] {
        var results = [String]()
        let b2Unified = b2 + ((-b1 / a1) * a2)
        let c2Unified = c2 - ((c1 / a1) * a2)
        let yResult = c2Unified / b2Unified
        let xResult = ((-b1 / a1) * yResult) + (c1 / a1)
        results.append(Utils.truncateResult(String(xResult)))
        results.append(Utils.truncateResult(String(yResult)))
        return results
    }
}

// MARK: MenuViewControllerDelegate
extension EquationsParentViewController: MenuViewControllerDelegate {
	func menuViewController(controller: MenuViewController, didSelectItem selectedItem: MenuItem) {
		var selectedViewController: UIViewController?
		switch selectedItem.destinationID {
    	case "Algebra":
    		selectedViewController = AlgebraParentViewController()
    	case "Equations":
    		selectedViewController = EquationsParentViewController()
    	case "Guide":
    		selectedViewController = GuideParentViewController()
    	case "About":
    		selectedViewController = AboutParentViewController()
    	default:
    		break
		}
		// Dismiss MenuViewController
		dismiss(animated: true)
		if selectedViewController != nil {
			navigationController!.viewControllers.append(selectedViewController!)
			navigationController!.viewControllers.removeFirst()
		}
	}
}

// MARK: UITabBarDelegate
extension EquationsParentViewController: UITabBarDelegate {
    func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) {
    	switch item.tag {
    	case 0:
    		showLinearVC()
    	case 1:
    		showQuadraticVC()
    	case 2:
    		showSystemVC()
    	default:
    		break
    	}
    }
}

// MARK: ChildViewControllerInteractionProtocol
extension EquationsParentViewController: ChildViewControllerInteractionProtocol {

	func childViewControllerInteraction(controlId: String, selectedItem: Any?) {
		switch controlId {
		
        case "calcLEButton":
            let input1 = (linearVC as! LinearViewController).mEditText.text
            let input2 = (linearVC as! LinearViewController).qEditText.text
            if input1 != nil && input1! != "" && input2 != nil && input2! != "" {
                let m = Float(String(input1!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let q = Float(String(input2!.characters.filter { "0123456789.-".characters.contains($0) }))!
                (linearVC as! LinearViewController).resultLabel.text = linearEquation(m: m, q: q)
            }
		
        case "calcQEButton":
            let input1 = (quadraticVC as! QuadraticViewController).aEditText.text
            let input2 = (quadraticVC as! QuadraticViewController).bEditText.text
            let input3 = (quadraticVC as! QuadraticViewController).cEditText.text
            if input1 != nil && input1! != "" && input2 != nil && input2! != "" && input3 != nil && input3! != "" {
                let a = Float(String(input1!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let b = Float(String(input2!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let c = Float(String(input3!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let results = quadraticEquation(a: a, b: b, c: c)
                (quadraticVC as! QuadraticViewController).x1ResultLabel.text = results[0]
                (quadraticVC as! QuadraticViewController).x2ResultLabel.text = results[1]
            }
		
        case "calcSEButton":
            let input1 = (systemVC as! SystemViewController).a1EditText.text
            let input2 = (systemVC as! SystemViewController).b1EditText.text
            let input3 = (systemVC as! SystemViewController).c1EditText.text
            let input4 = (systemVC as! SystemViewController).a2EditText.text
            let input5 = (systemVC as! SystemViewController).b2EditText.text
            let input6 = (systemVC as! SystemViewController).c2EditText.text
            if input1 != nil && input1! != "" && input2 != nil && input2! != "" && input3 != nil && input3! != "" &&
               input4 != nil && input4! != "" && input5 != nil && input5! != "" && input6 != nil && input6! != "" {
                let a1 = Float(String(input1!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let b1 = Float(String(input2!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let c1 = Float(String(input3!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let a2 = Float(String(input4!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let b2 = Float(String(input5!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let c2 = Float(String(input6!.characters.filter { "0123456789.-".characters.contains($0) }))!
                let results = twoEquationsSystem(a1: a1, b1: b1, c1: c1, a2: a2, b2: b2, c2: c2)
                (systemVC as! SystemViewController).xResultLabel.text = results[0]
                (systemVC as! SystemViewController).yResultLabel.text = results[1]
            }
        
		
    	default:
    		break
		}
	}
}
