//
//  AlgebraParentViewController.swift
//  Algebra
//
//  Automatically generated by MobileCodeGenerator 4.
//  Copyright 2018 . All rights reserved.
//

import UIKit
import Foundation

class AlgebraParentViewController: UIViewController {
    
    // MARK: Properties
	fileprivate let listVC: UIViewController
	fileprivate let fractionsVC: UIViewController
	fileprivate let probabilityVC: UIViewController
    fileprivate let commonsVC: UIViewController
    var layoutType: Int = Constants.SCENE_TYPE_SINGLE_VC
    lazy var menuTransitioningDelegate = MenuPresentationManager()
    
    
    // MARK: Initialization
    init() {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
		listVC = storyboard.instantiateViewController(withIdentifier: "ListViewControllerStoryboardID")
		fractionsVC = storyboard.instantiateViewController(withIdentifier: "FractionsViewControllerStoryboardID")
		probabilityVC = storyboard.instantiateViewController(withIdentifier: "ProbabilityViewControllerStoryboardID")
		commonsVC = storyboard.instantiateViewController(withIdentifier: "CommonsViewControllerStoryboardID")
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
		listVC = storyboard.instantiateViewController(withIdentifier: "ListViewControllerStoryboardID")
		fractionsVC = storyboard.instantiateViewController(withIdentifier: "FractionsViewControllerStoryboardID")
		probabilityVC = storyboard.instantiateViewController(withIdentifier: "ProbabilityViewControllerStoryboardID")
		commonsVC = storyboard.instantiateViewController(withIdentifier: "CommonsViewControllerStoryboardID")
        super.init(coder: aDecoder)
    }
    
    // MARK: UIViewController
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Setup menu button into navigation bar
	    let menuIcon = UIImage(named: "menu_icon")
	    navigationItem.leftBarButtonItem = UIBarButtonItem(image: menuIcon, style: .plain, target: self, action: #selector(showMenu))
	    
        if UIDevice.current.userInterfaceIdiom == .phone {
            layoutType = Constants.SCENE_TYPE_SINGLE_VC
            setupPhoneUI()
        } else if UIDevice.current.userInterfaceIdiom == .pad {
            layoutType = Constants.SCENE_TYPE_MULTI_VC
            setupTabletUI()
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func showMenu() {
    	let storyboard = UIStoryboard(name: "Main", bundle: nil)
		let menuViewController = storyboard.instantiateViewController(withIdentifier: "MenuViewControllerStoryboardID") as! MenuViewController
		menuViewController.delegate = self
		menuViewController.transitioningDelegate = menuTransitioningDelegate
		menuViewController.modalPresentationStyle = .custom
		present(menuViewController, animated: true, completion: nil)
	}
    
    
    // MARK: UI Setup
    private func setupUI() {
		view.backgroundColor = UIColor(displayP3Red: 1, green: 1, blue: 1, alpha: 1)
		addChildViewController(listVC)
		listVC.didMove(toParentViewController: self)
		listVC.view.translatesAutoresizingMaskIntoConstraints = false
		addChildViewController(fractionsVC)
		fractionsVC.didMove(toParentViewController: self)
		fractionsVC.view.translatesAutoresizingMaskIntoConstraints = false
		addChildViewController(probabilityVC)
		probabilityVC.didMove(toParentViewController: self)
		probabilityVC.view.translatesAutoresizingMaskIntoConstraints = false
		addChildViewController(commonsVC)
		commonsVC.didMove(toParentViewController: self)
		commonsVC.view.translatesAutoresizingMaskIntoConstraints = false
    }
    
    private func setupPhoneUI() {
        setupUI()
        showListVC()
    }
    
    private func setupTabletUI() {
        setupUI()
        let listVCView = listVC.view!
        view.addSubview(listVCView)
        NSLayoutConstraint.activate([
            listVCView.topAnchor.constraint(
                equalTo: view.topAnchor, constant: 0),
            listVCView.leadingAnchor.constraint(
                equalTo: view.leadingAnchor, constant: 0),
            listVCView.widthAnchor.constraint(
                equalTo: view.widthAnchor, multiplier: 0.3),
            listVCView.heightAnchor.constraint(
                equalTo: view.heightAnchor, multiplier: 1.0),
            ])
        let separator = UIView()
        separator.translatesAutoresizingMaskIntoConstraints = false
        separator.backgroundColor = UIColor(displayP3Red: 0.73, green: 0.73, blue: 0.73, alpha: 1)
        view.addSubview(separator)
        NSLayoutConstraint.activate([
            separator.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            separator.topAnchor.constraint(equalTo: view.topAnchor),
            separator.widthAnchor.constraint(equalToConstant: 1),
            separator.leadingAnchor.constraint(equalTo: listVCView.trailingAnchor)
            ])
        showFractionsVC()
    }
    
    // MARK: functions that show each child view controller
    @objc fileprivate func showListVC() {
		if view.subviews.count > 0 {
			view.subviews[0].removeFromSuperview()
        }
        
        if layoutType == Constants.SCENE_TYPE_SINGLE_VC {
            // Setup menu button into navigation bar
            let menuIcon = UIImage(named: "menu_icon")
            navigationItem.leftBarButtonItem = UIBarButtonItem(image: menuIcon, style: .plain, target: self, action: #selector(showMenu))
        }
	
		let listView = listVC.view!
        view.addSubview(listView)
            
		NSLayoutConstraint.activate([
	            listView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
	            listView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
	            listView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
	            listView.topAnchor.constraint(equalTo: view.topAnchor)
            	])
	}
    
	fileprivate func showFractionsVC() {
		if view.subviews.count > 0 && layoutType == Constants.SCENE_TYPE_SINGLE_VC {
			view.subviews[0].removeFromSuperview()
        } else if view.subviews.count > 2 && layoutType == Constants.SCENE_TYPE_MULTI_VC {
            view.subviews[2].removeFromSuperview()
        }
        
        var reference: NSLayoutXAxisAnchor
        if layoutType == Constants.SCENE_TYPE_SINGLE_VC {
            reference = view.leadingAnchor
        } else {
            reference = view.subviews[1].trailingAnchor
        }
        
        let fractionsView = fractionsVC.view!
        view.addSubview(fractionsView)
            
        NSLayoutConstraint.activate([
            fractionsView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            fractionsView.topAnchor.constraint(equalTo: view.topAnchor),
            fractionsView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            fractionsView.leadingAnchor.constraint(equalTo: reference)
        ])
	}
    
	fileprivate func showProbabilityVC() {
		if view.subviews.count > 0 && layoutType == Constants.SCENE_TYPE_SINGLE_VC {
			view.subviews[0].removeFromSuperview()
        } else if view.subviews.count > 2 && layoutType == Constants.SCENE_TYPE_MULTI_VC {
            view.subviews[2].removeFromSuperview()
        }
        
        var reference: NSLayoutXAxisAnchor
        if layoutType == Constants.SCENE_TYPE_SINGLE_VC {
            reference = view.leadingAnchor
        } else {
            reference = view.subviews[1].trailingAnchor
        }
        
        let probabilityView = probabilityVC.view!
        view.addSubview(probabilityView)
        
        NSLayoutConstraint.activate([
            probabilityView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            probabilityView.topAnchor.constraint(equalTo: view.topAnchor),
            probabilityView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            probabilityView.leadingAnchor.constraint(equalTo: reference)
            ])
	}
    
	fileprivate func showCommonsVC() {
		if view.subviews.count > 0 && layoutType == Constants.SCENE_TYPE_SINGLE_VC {
			view.subviews[0].removeFromSuperview()
        } else if view.subviews.count > 2 && layoutType == Constants.SCENE_TYPE_MULTI_VC {
            view.subviews[2].removeFromSuperview()
        }
        
        var reference: NSLayoutXAxisAnchor
        if layoutType == Constants.SCENE_TYPE_SINGLE_VC {
            reference = view.leadingAnchor
        } else {
            reference = view.subviews[1].trailingAnchor
        }
        
        let commonsView = commonsVC.view!
        view.addSubview(commonsView)
        
        NSLayoutConstraint.activate([
            commonsView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            commonsView.topAnchor.constraint(equalTo: view.topAnchor),
            commonsView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            commonsView.leadingAnchor.constraint(equalTo: reference)
            ])
    }
    
    // MARK: application logic
    fileprivate func decimalToFraction(rawInput: String) -> String {
        if !rawInput.contains(".") {
            return rawInput + " / 1"
        }
        let splittedInput = rawInput.components(separatedBy: ".")
        let decPart = Int(splittedInput[1])!
        var n = decPart, den = 1
        while n % Int(NSDecimalNumber(decimal: pow(10, splittedInput[1].characters.count))) != 0 {
            n += decPart
            den += 1
        }
        let num = Int(Float(rawInput)! * Float(den))
        return String(num) + " / " + String(den)
    }
    
    fileprivate func simplifyFraction(num: Int, den: Int) -> String {
        if num % den == 0 {
            return String(num / den) + " / 1"
        }
        var flag = false, n = num, d = den
        while !flag {
            flag = true
            for i in (2...min(num, den)) {
                if n % i == 0 && d % i == 0 {
                    n /= i
                    d /= i
                    flag = false
                }
            }
        }
        return String(n) + " / " + String(d)
    }
    
    fileprivate func fractionToDecimal(num: Int, den: Int) -> String {
        let n = Float(num), d = Float(den)
        return Utils.truncateResult(String(n / d))
    }
    
    fileprivate func permutations(n: Int, k: Int, order: Bool, repetition: Bool) -> String {
        if order && repetition {
            return String(Int(NSDecimalNumber(decimal: pow(Decimal(n), k))))
        } else if !order && repetition {
            return  String(fact(n: n + k - 1) / (fact(n: k) * fact(n: n - 1)))
        } else if order && n >= k {
            return String(fact(n: n) / fact(n: n - k))
        } else if !order && n >= k {
            return String(fact(n: n) / (fact(n: k) * fact(n: n - k)))
        }
        return "(no result)"
    }
    
    fileprivate func fact(n: Int) -> Int {
        var result = 1, i = n
        while i > 1 {
            result *= i
            i -= 1
        }
        return result
    }
    
    fileprivate func gcf(a: Int, b: Int) -> String {
        var gcf = min(a, b)
        while a % gcf != 0 || b % gcf != 0 {
            gcf -= 1
        }
        return String(gcf)
    }
    
    fileprivate func lcm(a: Int, b: Int) -> String {
        var lcm = max(a, b)
        while lcm % a != 0 || lcm % b != 0 {
            lcm += 1
        }
        return String(lcm)
    }
}

// MARK: MenuViewControllerDelegate
extension AlgebraParentViewController: MenuViewControllerDelegate {
	func menuViewController(controller: MenuViewController, didSelectItem selectedItem: MenuItem) {
		var selectedViewController: UIViewController?
		switch selectedItem.destinationID {
    	case "Algebra":
    		selectedViewController = AlgebraParentViewController()
    	case "Equations":
    		selectedViewController = EquationsParentViewController()
    	case "Guide":
    		selectedViewController = GuideParentViewController()
    	case "About":
    		selectedViewController = AboutParentViewController()
    	default:
    		break
		}
		// Dismiss MenuViewController
		dismiss(animated: true)
		if selectedViewController != nil {
			navigationController!.viewControllers.append(selectedViewController!)
			navigationController!.viewControllers.removeFirst()
		}
	}
}


// MARK: ChildViewControllerInteractionProtocol
extension AlgebraParentViewController: ChildViewControllerInteractionProtocol {

	func childViewControllerInteraction(controlId: String, selectedItem: Any?) {
		switch controlId {
        
		case "toolsListView":
			let selection = selectedItem as! Int
            switch selection {
            case 0:
                showFractionsVC()
                
            case 1:
                showProbabilityVC()
                
            case 2:
                showCommonsVC()
                
            default:
                break
            }
            if layoutType == Constants.SCENE_TYPE_SINGLE_VC {
                showBackButton()
            }
		
		
        case "calcFractionsButton":
            let input1 = (fractionsVC as! FractionsViewController).decimalEditText.text
            if input1 != nil && input1! != "" {
                (fractionsVC as! FractionsViewController).dtfResultLabel.text = decimalToFraction(rawInput: String(input1!.characters.filter { "0123456789.".characters.contains($0) }))
            }
            let input2 = (fractionsVC as! FractionsViewController).numEditText.text, input3 = (fractionsVC as! FractionsViewController).denEditText.text
            if input2 != nil && input2! != "" && input3 != nil && input3! != "" {
                let num = Int(String(input2!.characters.filter { "0123456789.".characters.contains($0) }))!
                let den = Int(String(input3!.characters.filter { "0123456789.".characters.contains($0) }))!
                (fractionsVC as! FractionsViewController).simpleResultLabel.text = simplifyFraction(num: num, den: den)
                (fractionsVC as! FractionsViewController).ftdResultLabel.text = fractionToDecimal(num: num, den: den)
            }
        
		
        case "calcProbButton":
			let input1 = (probabilityVC as! ProbabilityViewController).cardinalityEditText.text
			let input2 = (probabilityVC as! ProbabilityViewController).kEditText.text
            if input1 != nil && input1! != "" && input2 != nil && input2! != "" {
                let n = Int(String(input1!.characters.filter { "0123456789.".characters.contains($0) }))!
                let k = Int(String(input2!.characters.filter { "0123456789.".characters.contains($0) }))!
                let order = (probabilityVC as! ProbabilityViewController).orderSwitchButton.isOn
                let repetition = (probabilityVC as! ProbabilityViewController).repeatSwitchButton.isOn
                (probabilityVC as! ProbabilityViewController).resultLabel.text = permutations(n: n, k: k, order: order, repetition: repetition)
            }
		
		
        case "calcCommButton":
            let input1 = (commonsVC as! CommonsViewController).firstEditText.text
            let input2 = (commonsVC as! CommonsViewController).secondEditText.text
            if input1 != nil && input1! != "" && input2 != nil && input2! != "" {
                let a = Int(String(input1!.characters.filter { "0123456789.".characters.contains($0) }))!
                let b = Int(String(input2!.characters.filter { "0123456789.".characters.contains($0) }))!
                (commonsVC as! CommonsViewController).gcfResultLabel.text = gcf(a: a, b: b)
                (commonsVC as! CommonsViewController).lcmResultLabel.text = lcm(a: a, b: b)
            }
        
		
    	default:
    		break
		}
	}
    
    func showBackButton() {
        navigationItem.leftBarButtonItem = UIBarButtonItem(title: "Back", style: .plain, target: self, action: #selector(showListVC))
    }
}
