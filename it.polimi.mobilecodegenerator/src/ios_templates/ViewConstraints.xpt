«REM»
Copyright 2018 Gregorio Perego, Stefania Pezzetti, Aldo Pintus, Alessio Rossotti, Massimo Beccari
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«EXTENSION app_extensions::Java»

«DEFINE constraints FOR ViewController-»

«FOREACH buttons AS b-»
    «EXPAND siblingConstraints FOR b»
    «EXPAND parentConstraints FOR b»
    «EXPAND chainAndDefaultConstraints FOR b»
«ENDFOREACH-»
«FOREACH cards AS c-»
    «EXPAND siblingConstraints FOR c»
    «EXPAND parentConstraints FOR c»
    «EXPAND chainAndDefaultConstraints FOR c»
«ENDFOREACH-»
«FOREACH sliders AS s-»
    «EXPAND siblingConstraints FOR s»
    «EXPAND parentConstraints FOR s»
    «EXPAND chainAndDefaultConstraints FOR s»
«ENDFOREACH-»
«FOREACH spinners AS s-»
    «EXPAND siblingConstraints FOR s»
    «EXPAND parentConstraints FOR s»
    «EXPAND chainAndDefaultConstraints FOR s»
«ENDFOREACH-»
«FOREACH switches AS s-»
    «EXPAND siblingConstraints FOR s»
    «EXPAND parentConstraints FOR s»
    «EXPAND chainAndDefaultConstraints FOR s»
«ENDFOREACH-»
«FOREACH datepickers AS d-»
    «EXPAND siblingConstraints FOR d»
    «EXPAND parentConstraints FOR d»
    «EXPAND chainAndDefaultConstraints FOR d»
«ENDFOREACH-»
«FOREACH textViews AS tv-»
	«EXPAND siblingConstraints FOR tv»
    «EXPAND parentConstraints FOR tv»
    «EXPAND chainAndDefaultConstraints FOR tv»
«ENDFOREACH-»
«FOREACH editTexts AS et-»
	«EXPAND siblingConstraints FOR et»
    «EXPAND parentConstraints FOR et»
    «EXPAND chainAndDefaultConstraints FOR et»
«ENDFOREACH-»
«FOREACH imageViews AS iv-»
	«EXPAND siblingConstraints FOR iv»
    «EXPAND parentConstraints FOR iv»
    «EXPAND chainAndDefaultConstraints FOR iv»
«ENDFOREACH-»
«FOREACH videoViews AS vv-»
	«EXPAND siblingConstraints FOR vv»
    «EXPAND parentConstraints FOR vv»
    «EXPAND chainAndDefaultConstraints FOR vv»
«ENDFOREACH-»
«FOREACH webViews AS wv-»
	«EXPAND siblingConstraints FOR wv»
    «EXPAND parentConstraints FOR wv»
    «EXPAND chainAndDefaultConstraints FOR wv»
«ENDFOREACH-» 
«FOREACH listViews AS lv-»
	«EXPAND siblingConstraints FOR lv»
    «EXPAND parentConstraints FOR lv»
    «EXPAND chainAndDefaultConstraints FOR lv»
«ENDFOREACH-»   
«FOREACH gridViews AS gv-»
	«EXPAND siblingConstraints FOR gv»
    «EXPAND parentConstraints FOR gv»
    «EXPAND chainAndDefaultConstraints FOR gv»
«ENDFOREACH-»
«FOREACH timepickers AS t-»
    «EXPAND siblingConstraints FOR t»
    «EXPAND parentConstraints FOR t»
    «EXPAND chainAndDefaultConstraints FOR t»
«ENDFOREACH-»
«IF photocameraController!=null-»
	«EXPAND siblingConstraints FOR photocameraController»
    «EXPAND parentConstraints FOR photocameraController»
    «EXPAND chainAndDefaultConstraints FOR photocameraController»
«ENDIF-»
«IF videocameraController!=null-»
	«EXPAND siblingConstraints FOR videocameraController»
    «EXPAND parentConstraints FOR videocameraController»
    «EXPAND chainAndDefaultConstraints FOR videocameraController»
«ENDIF-»
«IF audioRecorder!=null-»
	«EXPAND siblingConstraints FOR audioRecorder»
    «EXPAND parentConstraints FOR audioRecorder»
    «EXPAND chainAndDefaultConstraints FOR audioRecorder»
«ENDIF-»
«IF map!=null-»
	«EXPAND siblingConstraints FOR map»
    «EXPAND parentConstraints FOR map»
    «EXPAND chainAndDefaultConstraints FOR map»
«ENDIF-»
«FOREACH audioPlayers AS ap-»
    «EXPAND siblingConstraints FOR ap»
    «EXPAND parentConstraints FOR ap»
    «EXPAND chainAndDefaultConstraints FOR ap»
«ENDFOREACH-»

«ENDDEFINE-»


«DEFINE innerConstraints FOR UiPhoneControl-»
	«REM» Width «ENDREM»
	«IF dimensionConstraint.fixedWidth != null-»
	<constraint firstAttribute="width" constant="«dimensionConstraint.fixedWidth»" id="«id»-width"/>
	«ELSEIF dimensionConstraint.widthPercent == null && dimensionConstraint.fixedRatio == null && controlChain == null && !dimensionIsUnbinded(true, positionConstraints.layoutEdge)-»
	<constraint firstAttribute="width" constant="«defaultWidth»" id="«id»-width"/>
	«ENDIF-»
	«REM» Height «ENDREM»
	«IF dimensionConstraint.fixedHeight != null-»
	<constraint firstAttribute="height" constant="«dimensionConstraint.fixedHeight»" id="«id»-height"/>
	«ELSEIF dimensionConstraint.heightPercent == null && dimensionConstraint.fixedRatio == null && controlChain == null && !dimensionIsUnbinded(false, positionConstraints.layoutEdge)-»
	<constraint firstAttribute="height" constant="«defaultHeight»" id="«id»-height"/>
	«ENDIF-»
	«REM» Ratio «ENDREM»
	«IF dimensionConstraint.fixedRatio != null-»
	<constraint firstAttribute="width" secondItem="«id»" secondAttribute="height" multiplier="«dimensionConstraint.fixedRatio»" id="«id»-width"/>
	«ENDIF-»
«ENDDEFINE-»


«DEFINE siblingConstraints FOR UiPhoneControl-»
	«FOREACH positionConstraints AS constraint-»
	«IF !constraint.withParent-»
		«IF constraint.layoutEdge.toString().matches("start") && constraint.referenceLayoutEdge.toString().matches("start")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«constraint.referenceElement.id»" secondAttribute="leading" priority="750" constant="«(marginStart + paddingStart).toInteger()»" id="«id»-start-start"/>
		«ELSEIF constraint.layoutEdge.toString().matches("start") && constraint.referenceLayoutEdge.toString().matches("end")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«constraint.referenceElement.id»" secondAttribute="trailing" priority="750" constant="«((marginStart + paddingStart) + constraint.referenceElement.marginEnd).toInteger()»" id="«id»-start-end"/>
		«ELSEIF constraint.layoutEdge.toString().matches("end") && constraint.referenceLayoutEdge.toString().matches("start")-»
		<constraint firstItem="«id»" firstAttribute="trailing" secondItem="«constraint.referenceElement.id»" secondAttribute="leading" priority="750" constant="«((marginEnd + paddingEnd) + constraint.referenceElement.marginStart).toInteger()»" id="«id»-end-start"/>
		«ELSEIF constraint.layoutEdge.toString().matches("end") && constraint.referenceLayoutEdge.toString().matches("end")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«constraint.referenceElement.id»" secondAttribute="trailing" priority="750" constant="«(marginEnd + paddingEnd).toInteger()»" id="«id»-end-end"/>
		«ELSEIF constraint.layoutEdge.toString().matches("top") && constraint.referenceLayoutEdge.toString().matches("top")-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«constraint.referenceElement.id»" secondAttribute="top" priority="750" constant="«(marginTop + paddingTop).toInteger()»" id="«id»-top-top"/>
		«ELSEIF constraint.layoutEdge.toString().matches("top") && constraint.referenceLayoutEdge.toString().matches("bottom")-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«constraint.referenceElement.id»" secondAttribute="bottom" priority="750" constant="«((marginTop + paddingTop) + constraint.referenceElement.marginBottom).toInteger()»" id="«id»-top-bottom"/>
		«ELSEIF constraint.layoutEdge.toString().matches("bottom") && constraint.referenceLayoutEdge.toString().matches("top")-»
		<constraint firstItem="«id»" firstAttribute="bottom" secondItem="«constraint.referenceElement.id»" secondAttribute="top" priority="750" constant="«((marginBottom + paddingBottom) + constraint.referenceElement.marginTop).toInteger()»" id="«id»-bottom-top"/>
		«ELSEIF constraint.layoutEdge.toString().matches("bottom") && constraint.referenceLayoutEdge.toString().matches("bottom")-»
		<constraint firstItem="«id»" firstAttribute="bottom" secondItem="«constraint.referenceElement.id»" secondAttribute="bottom" priority="750" constant="«(marginBottom + paddingBottom).toInteger()»" id="«id»-bottom-bottom"/>
		«ELSEIF constraint.layoutEdge.toString().matches("centerX") && constraint.referenceLayoutEdge.toString().matches("centerX")-»
		<constraint firstItem="«id»" firstAttribute="centerX" secondItem="«constraint.referenceElement.id»" secondAttribute="centerX" priority="750" constant="«((marginStart + paddingStart) - (marginEnd + paddingEnd)).toInteger()»" id="«id»-centerX"/>
		«ELSEIF constraint.layoutEdge.toString().matches("centerY") && constraint.referenceLayoutEdge.toString().matches("centerY")-»
		<constraint firstItem="«id»" firstAttribute="centerY" secondItem="«constraint.referenceElement.id»" secondAttribute="centerY" priority="750" constant="«((marginTop + paddingTop) - (marginBottom + paddingBottom)).toInteger()»" id="«id»-centerY"/>
		«ENDIF-»
		«REM»
		«IF constraint.layoutEdge.toString().matches("start") && constraint.referenceLayoutEdge.toString().matches("start")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«constraint.referenceElement.id»" secondAttribute="leading" priority="750" constant="«((marginStart + paddingStart) - constraint.referenceElement.marginStart).toInteger()»" id="«id»-start-start"/>
		«ELSEIF constraint.layoutEdge.toString().matches("start") && constraint.referenceLayoutEdge.toString().matches("end")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«constraint.referenceElement.id»" secondAttribute="trailing" priority="750" constant="«((marginStart + paddingStart) + constraint.referenceElement.marginEnd).toInteger()»" id="«id»-start-end"/>
		«ELSEIF constraint.layoutEdge.toString().matches("end") && constraint.referenceLayoutEdge.toString().matches("start")-»
		<constraint firstItem="«id»" firstAttribute="trailing" secondItem="«constraint.referenceElement.id»" secondAttribute="leading" priority="750" constant="«(-(marginEnd + paddingEnd) - constraint.referenceElement.marginStart).toInteger()»" id="«id»-end-start"/>
		«ELSEIF constraint.layoutEdge.toString().matches("end") && constraint.referenceLayoutEdge.toString().matches("end")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«constraint.referenceElement.id»" secondAttribute="trailing" priority="750" constant="«(constraint.referenceElement.marginEnd - (marginEnd + paddingEnd)).toInteger()»" id="«id»-end-end"/>
		«ELSEIF constraint.layoutEdge.toString().matches("top") && constraint.referenceLayoutEdge.toString().matches("top")-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«constraint.referenceElement.id»" secondAttribute="top" priority="750" constant="«((marginTop + paddingTop) - constraint.referenceElement.marginTop).toInteger()»" id="«id»-top-top"/>
		«ELSEIF constraint.layoutEdge.toString().matches("top") && constraint.referenceLayoutEdge.toString().matches("bottom")-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«constraint.referenceElement.id»" secondAttribute="bottom" priority="750" constant="«((marginTop + paddingTop) + constraint.referenceElement.marginBottom).toInteger()»" id="«id»-top-bottom"/>
		«ELSEIF constraint.layoutEdge.toString().matches("bottom") && constraint.referenceLayoutEdge.toString().matches("top")-»
		<constraint firstItem="«id»" firstAttribute="bottom" secondItem="«constraint.referenceElement.id»" secondAttribute="top" priority="750" constant="«(-(marginBottom + paddingBottom) - constraint.referenceElement.marginTop).toInteger()»" id="«id»-bottom-top"/>
		«ELSEIF constraint.layoutEdge.toString().matches("bottom") && constraint.referenceLayoutEdge.toString().matches("bottom")-»
		<constraint firstItem="«id»" firstAttribute="bottom" secondItem="«constraint.referenceElement.id»" secondAttribute="bottom" priority="750" constant="«(constraint.referenceElement.marginBottom - (marginBottom + paddingBottom)).toInteger()»" id="«id»-bottom-bottom"/>
		«ELSEIF constraint.layoutEdge.toString().matches("centerX") && constraint.referenceLayoutEdge.toString().matches("centerX")-»
		<constraint firstItem="«id»" firstAttribute="centerX" secondItem="«constraint.referenceElement.id»" secondAttribute="centerX" priority="750" id="«id»-centerX"/>
		«ELSEIF constraint.layoutEdge.toString().matches("centerY") && constraint.referenceLayoutEdge.toString().matches("centerY")-»
		<constraint firstItem="«id»" firstAttribute="centerY" secondItem="«constraint.referenceElement.id»" secondAttribute="centerY" priority="750" id="«id»-centerY"/>
		«ENDIF-»
		«ENDREM»
	«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE-»


«DEFINE parentConstraints FOR UiPhoneControl-»
	«REM» Dimension Constraints «ENDREM»
	«IF dimensionConstraint.widthPercent != null-»
	<constraint firstItem="«id»" firstAttribute="width" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="width" multiplier="«dimensionConstraint.widthPercent»" id="«id»-width"/>
	«ENDIF-»
	«REM» Position Constraints «ENDREM»
	«FOREACH positionConstraints AS constraint-»
	«IF constraint.withParent-»
		«IF constraint.layoutEdge.toString().matches("start") && constraint.referenceLayoutEdge.toString().matches("start")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="«(marginStart + paddingStart).toInteger()»" id="«id»-parent-start"/>
		«ELSEIF constraint.layoutEdge.toString().matches("end") && constraint.referenceLayoutEdge.toString().matches("end")-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="trailing" priority="750" constant="«(marginEnd + paddingEnd).toInteger()»" id="«id»-parent-end"/>
		«ELSEIF constraint.layoutEdge.toString().matches("top") && constraint.referenceLayoutEdge.toString().matches("top")-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»-guide-top" secondAttribute="top" priority="750" constant="«(marginTop + paddingTop).toInteger()»" id="«id»-parent-top"/>
		«ELSEIF constraint.layoutEdge.toString().matches("bottom") && constraint.referenceLayoutEdge.toString().matches("bottom")-»
		<constraint firstItem="«viewController.name.toFirstUpper()»-guide-bottom" firstAttribute="bottom" secondItem="«id»" secondAttribute="bottom" priority="750" constant="«(marginBottom + paddingBottom).toInteger()»" id="«id»-parent-bottom"/>
		«ELSEIF constraint.layoutEdge.toString().matches("centerX") && constraint.referenceLayoutEdge.toString().matches("centerX")-»
		<constraint firstItem="«id»" firstAttribute="centerX" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="centerX" priority="750" constant="«((marginStart + paddingStart) - (marginEnd + paddingEnd)).toInteger()»" id="«id»-parent-centerX"/>
		«ELSEIF constraint.layoutEdge.toString().matches("centerY") && constraint.referenceLayoutEdge.toString().matches("centerY")-»
		<constraint firstItem="«id»" firstAttribute="centerY" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="centerY" priority="750" constant="«((marginTop + paddingTop) - (marginBottom + paddingBottom)).toInteger()»" id="«id»-parent-centerY"/>
		«ENDIF-»
	«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE-»


«DEFINE chainAndDefaultConstraints FOR UiPhoneControl-»
	«IF controlChain == null-»
		«IF positionIsUnbinded(true, positionConstraints.layoutEdge)-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" constant="«posX.toInteger() + marginStart.toInteger() + paddingStart.toInteger()»" id="«id»-posX"/>
		«ENDIF-»
		«IF positionIsUnbinded(false, positionConstraints.layoutEdge)-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»-guide-top" secondAttribute="bottom" constant="«posY.toInteger() + marginTop.toInteger() + paddingTop.toInteger()»" id="«id»-posY"/>
		«ENDIF-»
	«ELSEIF controlChain.axis.toString().matches("horizontal")-»
		«IF controlChain.type.toString().matches("spread")-»
		«REM» Horizontal positioning of the control «ENDREM»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" secondAttribute="trailing" priority="750" constant="0" id="«id»-constraint-chain"/>
		«REM» Horizontal and vertical positioning of the ghost view on the left «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintX"/>
		«ELSE-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="leading" secondItem="«precedentInChain.id»" secondAttribute="trailing" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintX"/>
		«REM» All ghost views' width binded to GhostView0 width «ENDREM»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="width" secondItem="«controlChain.id»-GhostView0" secondAttribute="width" priority="750" multiplier="1" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraint-width"/>
		«ENDIF-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintY"/>
		«REM» Horizontal and vertical positioning of the ghost view on the right of the last control of the chain «ENDREM»
		«IF followingInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="leading" secondItem="«id»" secondAttribute="trailing" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraintX"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="trailing" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="trailing" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraintX-2"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraintY"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="width" secondItem="«controlChain.id»-GhostView0" secondAttribute="width" priority="750" multiplier="1" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraint-width"/>
		«ENDIF-»
		«ELSEIF controlChain.type.toString().matches("spread_inside")-»
		«REM» Horizontal positioning of the control «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«id»-constraint-chain"/>
		«ELSE-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" secondAttribute="trailing" priority="750" constant="0" id="«id»-constraint-chain"/>
		«ENDIF-»
		«IF followingInChain == null-»
		<constraint firstItem="«id»" firstAttribute="trailing" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="trailing" priority="750" constant="0" id="«id»-constraint-chain-2"/>
		«ENDIF-»
		«REM» Horizontal and vertical positioning of the ghost view on the left «ENDREM»
		«IF precedentInChain != null-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="leading" secondItem="«precedentInChain.id»" secondAttribute="trailing" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintX"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintY"/>
		«ENDIF-»
		«REM» All ghost views' width binded to GhostView1 width «ENDREM»
		«IF indexInChain.toInteger() > 1-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="width" secondItem="«controlChain.id»-GhostView1" secondAttribute="width" priority="750" multiplier="1" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraint-width"/>
		«ENDIF-»
		«ELSEIF controlChain.type.toString().matches("packed")-»
		«REM» Horizontal positioning of the control «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" secondAttribute="trailing" priority="750" constant="0" id="«id»-constraint-chain"/>
		«ELSE-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«precedentInChain.id»" secondAttribute="trailing" priority="750" constant="«controlChain.spacing.toInteger()»" id="«id»-constraint-chain"/>
		«ENDIF-»
		«REM» Horizontal and vertical positioning of the ghost view on the left of the controls (done by the first control) «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView0" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView0-constraintX"/>
		<constraint firstItem="«controlChain.id»-GhostView0" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView0-constraintY"/>
		<constraint firstItem="«controlChain.id»-GhostView0" firstAttribute="width" secondItem="«controlChain.id»-GhostView1" secondAttribute="width" priority="750" multiplier="«(controlChain.bias) / (1 - controlChain.bias)»" id="«controlChain.id»-GhostView0-constraint-width"/>
		«ENDIF-»
		«REM» Horizontal and vertical positioning of the ghost view on the right of the controls (done by the last control) «ENDREM»
		«IF followingInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView1" firstAttribute="leading" secondItem="«id»" secondAttribute="trailing" priority="750" constant="0" id="«controlChain.id»-GhostView1-constraintX"/>
		<constraint firstItem="«controlChain.id»-GhostView1" firstAttribute="trailing" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="trailing" priority="750" constant="0" id="«controlChain.id»-GhostView1-constraintX-2"/>
		<constraint firstItem="«controlChain.id»-GhostView1" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView1-constraintY"/>
		«ENDIF-»
		«ELSEIF controlChain.type.toString().matches("weighted")-»
		«REM» Horizontal positioning of the control (no ghost views in weighted chain) «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="«controlChain.spacing.toInteger() + marginStart.toInteger()»" id="«id»-constraint-chain"/>
		«ELSE-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«precedentInChain.id»" secondAttribute="trailing" priority="750" constant="«controlChain.spacing.toInteger()»" id="«id»-constraint-chain"/>
		«ENDIF-»
		«IF followingInChain == null-»
		<constraint firstItem="«id»" firstAttribute="trailing" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="trailing" priority="750" constant="«controlChain.spacing.toInteger() + marginEnd.toInteger()»" id="«id»-constraint-chain-2"/>
		«ENDIF-»
		«ENDIF-»
		«REM» Vertical position if there are no constraints (as usual) «ENDREM»
		«IF positionIsUnbinded(false, positionConstraints.layoutEdge)-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»-guide-top" secondAttribute="bottom" constant="«posY.toInteger() + marginTop.toInteger() + paddingTop.toInteger()»" id="«id»-posY"/>
		«ENDIF-»
	«ELSE»
		«IF controlChain.type.toString().matches("spread")-»
		«REM» Vertical positioning of the control «ENDREM»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" secondAttribute="bottom" priority="750" constant="0" id="«id»-constraint-chain"/>
		«REM» Horizontal and vertical positioning of the ghost view on the left «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintY"/>
		«ELSE-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="top" secondItem="«precedentInChain.id»" secondAttribute="bottom" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintY"/>
		«REM» All ghost views' height binded to GhostView0 height «ENDREM»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="height" secondItem="«controlChain.id»-GhostView0" secondAttribute="height" priority="750" multiplier="1" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraint-height"/>
		«ENDIF-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintX"/>
		«REM» Horizontal and vertical positioning of the ghost view on the right of the last control of the chain «ENDREM»
		«IF followingInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="top" secondItem="«id»" secondAttribute="bottom" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraintY"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="bottom" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="bottom" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraintY-2"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraintX"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()+1»" firstAttribute="height" secondItem="«controlChain.id»-GhostView0" secondAttribute="height" priority="750" multiplier="1" id="«controlChain.id»-GhostView«indexInChain.toInteger()+1»-constraint-height"/>
		«ENDIF-»
		«ELSEIF controlChain.type.toString().matches("spread_inside")-»
		«REM» Vertical positioning of the control «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«id»-constraint-chain"/>
		«ELSE-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" secondAttribute="bottom" priority="750" constant="0" id="«id»-constraint-chain"/>
		«ENDIF-»
		«IF followingInChain == null-»
		<constraint firstItem="«id»" firstAttribute="bottom" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="bottom" priority="750" constant="0" id="«id»-constraint-chain-2"/>
		«ENDIF-»
		«REM» Horizontal and vertical positioning of the ghost view on the left «ENDREM»
		«IF precedentInChain != null-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="top" secondItem="«precedentInChain.id»" secondAttribute="bottom" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintY"/>
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraintX"/>
		«ENDIF-»
		«REM» All ghost views' height binded to GhostView1 height «ENDREM»
		«IF indexInChain.toInteger() > 1-»
		<constraint firstItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" firstAttribute="height" secondItem="«controlChain.id»-GhostView1" secondAttribute="height" priority="750" multiplier="1" id="«controlChain.id»-GhostView«indexInChain.toInteger()»-constraint-height"/>
		«ENDIF-»
		«ELSEIF controlChain.type.toString().matches("packed")-»
		«REM» Vertical positioning of the control «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«controlChain.id»-GhostView«indexInChain.toInteger()»" secondAttribute="bottom" priority="750" constant="0" id="«id»-constraint-chain"/>
		«ELSE-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«precedentInChain.id»" secondAttribute="bottom" priority="750" constant="«controlChain.spacing.toInteger()»" id="«id»-constraint-chain"/>
		«ENDIF-»
		«REM» Horizontal and vertical positioning of the ghost view on the left of the controls (done by the first control) «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView0" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="0" id="«controlChain.id»-GhostView0-constraintY"/>
		<constraint firstItem="«controlChain.id»-GhostView0" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView0-constraintX"/>
		<constraint firstItem="«controlChain.id»-GhostView0" firstAttribute="height" secondItem="«controlChain.id»-GhostView1" secondAttribute="height" priority="750" multiplier="«(controlChain.bias) / (1 - controlChain.bias)»" id="«controlChain.id»-GhostView0-constraint-height"/>
		«ENDIF-»
		«REM» Horizontal and vertical positioning of the ghost view on the right of the controls (done by the last control) «ENDREM»
		«IF followingInChain == null-»
		<constraint firstItem="«controlChain.id»-GhostView1" firstAttribute="top" secondItem="«id»" secondAttribute="bottom" priority="750" constant="0" id="«controlChain.id»-GhostView1-constraintY"/>
		<constraint firstItem="«controlChain.id»-GhostView1" firstAttribute="bottom" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="bottom" priority="750" constant="0" id="«controlChain.id»-GhostView1-constraintY-2"/>
		<constraint firstItem="«controlChain.id»-GhostView1" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" priority="750" constant="0" id="«controlChain.id»-GhostView1-constraintX"/>
		«ENDIF-»
		«ELSEIF controlChain.type.toString().matches("weighted")-»
		«REM» Vertical positioning of the control (no ghost views in weighted chain) «ENDREM»
		«IF precedentInChain == null-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="top" priority="750" constant="«controlChain.spacing.toInteger() + marginTop.toInteger()»" id="«id»-constraint-chain"/>
		«ELSE-»
		<constraint firstItem="«id»" firstAttribute="top" secondItem="«precedentInChain.id»" secondAttribute="bottom" priority="750" constant="«controlChain.spacing.toInteger()»" id="«id»-constraint-chain"/>
		«ENDIF-»
		«IF followingInChain == null-»
		<constraint firstItem="«id»" firstAttribute="bottom" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="bottom" priority="750" constant="«controlChain.spacing.toInteger() + marginBottom.toInteger()»" id="«id»-constraint-chain-2"/>
		«ENDIF-»
		«ENDIF-»
		«REM» Horizontal position if there are no constraints (as usual) «ENDREM»
		«IF positionIsUnbinded(true, positionConstraints.layoutEdge)-»
		<constraint firstItem="«id»" firstAttribute="leading" secondItem="«viewController.name.toFirstUpper()»ViewID" secondAttribute="leading" constant="«posX.toInteger() + marginStart.toInteger() + paddingStart.toInteger()»" id="«id»-posX"/>
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE-»